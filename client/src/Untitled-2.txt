import React, { Component } from "react";

// Components
// import ProductsSearch from './Searcher';
import Pagination from '../../../components/Paginator';
import ProductsHeader from '../../../components/Header/ProductsHeader';
import RedesLine from '../../../components/Footer/Redes';
import TopProducts from './TopProducts';

// Redux
import { bindActionCreators } from 'redux';
import { connect } from 'react-redux';
import { createSelector } from 'reselect';

// Actions
import { fetchBrands } from "../../../redux/actions/brand";
import { fetchCategories } from "../../../redux/actions/category";
import { fetchColors } from '../../../redux/actions/product/color';
import { fetchDepartments } from '../../../redux/actions/department';
import { fetchLines, fetchSingleLine } from '../../../redux/actions/product/line';
import { fetchProducts } from '../../../redux/actions/product';
import { fetchSocialMedia } from '../../../redux/actions/site/socialMedia';

class ProductDetail extends Component {
  constructor(props) {
    super(props);
    this.handleNextClick = this.handleNextClick.bind(this); this.handlePrevClick = this.handlePrevClick.bind(this);
    this.getFilter = this.getFilter.bind(this); this.getSearch = this.getSearch.bind(this);
    this.getURL = this.getURL.bind(this);
    this.state = {
      currentPage: 1,
      limitPage: 20,
      offsetPage: 0,
      totalPages: 0,
      urlPage: '/productos/todos',
      params: '',
      paramsURL: '',
      searchURL: '',
      urlPageNumber: '',
      nextPage: '',
      color: '',
      brand: '',
      category: '',
      line: '',
      department: '',
      loading: true,
      previousPage: null,
      hasUrlParams: false,
      hasNext: true,
      hasPrev: false
    }
  }

  componentDidMount() {
    this.props.onFetchProducts('');
    this.getURL(this.props.location.search);
    this.props.onFetchCategories();
    this.props.onFetchDepartment();
    this.props.onFetchBrands();
    this.props.onFetchColor();
    this.props.onFetchLines();
    this.props.onFetchSocialMedia();
  }
  
  componentDidUpdate(prevProps, prevState) {
    // if (this.props.currentPage !== prevProps.currentPage){
    //   console.log('Estado actual props: ', this.props, '\nEstado previo props: ',prevProps)
    //   console.log('Estado props: ', this.props === prevProps)
    // }
    // console.log('Estado actual state: ', this.state, '\nEstado previo state: ',prevState)
    // console.log('Estado actual state: ', this.state.currentPage, '\nEstado previo state: ',prevState.currentPage)

    // if (this.props.products !== prevProps.products) {
    //   let totalPages = Math.ceil(this.props.products.count / this.state.limitPage);
    //   this.setState({ totalPages: totalPages });
    // }
    // if (this.state.currentPage !== prevState.currentPage){ 
    //   // console.log('------',this.state.currentPage , prevState.currentPage);
    //   this.props.onFetchProducts(this.state.params, this.state.currentPage); 
    //   let totalPages = Math.ceil(this.props.products.count / this.state.limitPage);
    //   this.setState({ totalPages: totalPages });
    // }
    // if (this.state.params === prevState.params && this.state.currentPage !== prevState.currentPage ){
    //   // console.log('------',this.state.params , prevState.params);
    //   this.props.onFetchProducts(this.state.params, this.state.currentPage); 
    //   let totalPages = Math.ceil(this.props.products.count / this.state.limitPage);
    //   this.setState({ totalPages: totalPages });
    // }
    // if (this.state.params !== prevState.params && this.state.currentPage === prevState.currentPage ){
    //   // console.log('------',this.state.params , prevState.params);
    //   this.props.onFetchProducts(this.state.params, 1); 
    //   let totalPages = Math.ceil(this.props.products.count / this.state.limitPage);
    //   this.setState({ totalPages: totalPages });
    // }
  }

  getURL(url) {
    // console.log(this.props);
    console.log(url);
    // let _url = '';
    // var _urlParams = '';
    // let totalPages =  Math.ceil(this.props.products.count / this.state.limitPage);
    // this.setState({ totalPages: totalPages });
    
    // let argUrl = '';
    // var _argUrl = [];

    // if (url.split('?')[1] !== undefined){
    //   argUrl = url.split('?')[1];
    //   if (argUrl.split('&') !== undefined){
    //     argUrl = argUrl.split('&');
        
    //     for ( let x in argUrl ){
    //       // console.log(argUrl.split('&'))
          
    //       if (argUrl[x].split('=')[0] === 'page'){

    //         _urlParams = `${_urlParams}?${ `page` }=${ argUrl[x].split('=')[1] }`;
            
    //         // eslint-disable-next-line
    //         this.setState({ currentPage: parseInt(argUrl[x].split('=')[1]) });  

    //       }

    //       if (argUrl[x].split('=')[0] === 'line'){

    //         _urlParams = `${_urlParams}?${argUrl[x].split('=')[0]}=${argUrl[x].split('=')[1]}`;
    //         _argUrl.push(_urlParams); 
    //         // this.onFetchLine(argUrl[x].split('=')[1])

    //       }
    //       if (argUrl[x].split('=')[0] === 'category'){
    //         _urlParams = `${_urlParams}?${argUrl[x].split('=')[0]}=${argUrl[x].split('=')[1]}`;
    //         _argUrl.push(_urlParams);
    //       }
    //       if (argUrl[x].split('=')[0] === 'department'){
    //         _urlParams = `${_urlParams}?${argUrl[x].split('=')[0]}=${argUrl[x].split('=')[1]}`;
    //         _argUrl.push(_urlParams);
    //       }
    //       if (argUrl[x].split('=')[0] === 'brand'){
    //         _urlParams = `${_urlParams}?${argUrl[x].split('=')[0]}=${argUrl[x].split('=')[1]}`;
    //         _argUrl.push(_urlParams);
    //       }
    //       if (argUrl[x].split('=')[0] === 'color'){
    //         _urlParams = `${_urlParams}?${argUrl[x].split('=')[0]}=${argUrl[x].split('=')[1]}`;
    //         _argUrl.push(_urlParams);
    //       }
    //       if (argUrl[x].split('=')[0] === 'search'){
    //         _urlParams = `${argUrl[x].split('=')[0]}=${argUrl[x].split('=')[1]}`;
    //         _argUrl.push(_urlParams);
    //         this.setState({
    //           searchURL:`${argUrl[x].split('=')[1]}`
    //         });
    //       }
    //     }
    //   }
    // }else{
    //   _urlParams = url;
    // }
    
    // if ( argUrl === '' ){
    //   argUrl = url
    // }else{
    //   argUrl = _argUrl[_argUrl.length - 1];
    // }
    
    // this.setState({
    //   params: argUrl,
    //   hasUrlParams: true
    // });
  }

  getFilter(e, arg, id, filter) {
    if (filter === 'color') {
      this.getURL(`color=${id}`)
    }
    if (filter === 'line') {
      this.getURL(`line=${id}`)
    }
    if (filter === 'category') {
      this.getURL(`category=${id}`)
    }
    if (filter === 'department') {
      this.getURL(`department=${id}`)
    }
    if (filter === 'brand') {
      this.getURL(`brand=${id}`)
    }
  }

  getSearch(e) {
    e.preventDefault();
    let valu = e.target.value;
    // console.log(valu);
    this.getURL(`search=${valu}`);
  }

  handleNextClick(e, page = this.state.currentPage) {
    // e.preventDefault();
    window.scrollTo(0, 0);
    let currentPage = page; 
    if (page < this.state.currentPage) {
      currentPage = page - 1;
    };
    let limitPage = this.state.limitPage || 20;
    let pages = this.state.totalPages;
    let offsetPage = Math.ceil(limitPage * (currentPage - 1));
    this.setState({ currentPage: currentPage, offsetPage: offsetPage });
    if (currentPage === pages) { this.setState({ hasNext: false }) };
    if (currentPage > 1) { this.setState({ hasPrev: true, currentPage: currentPage }) };
    if (currentPage > 1 && currentPage <= pages) {
      let urlPage = `page=${currentPage}`;
      this.getURL(urlPage); 
    }
    // console.log('currentPage ->', currentPage, 'pages ->', pages, 'offset ->', offsetPage)
  }

  handlePrevClick(e, page = this.state.currentPage) {
    // e.preventDefault();
    window.scrollTo(0, 0)
    //Decrementa el numero de la pagina
    let currentPage = page; //Aumenta el numero de la pagina
    let limitPage = this.state.limitPage || 20;
    let offsetPage = this.state.offsetPage - limitPage;
    let pages = this.state.totalPages;
    this.setState({ currentPage: currentPage, offsetPage: offsetPage });
    if (currentPage === 1) { this.setState({ hasPrev: false, hasNext: true }); }
    if (currentPage >= 1 && currentPage <= pages) {
      let urlPage = `page=${currentPage}`;
      this.getURL(urlPage); 
    }
    // console.log('currentPage ->', currentPage, 'pages ->', pages, 'offset ->', offsetPage)
  }

  render() {
    // console.log(this.state.totalPages);
    function* chunkArray(original, n) {
      const ary = [...original];
      while (ary.length > 0)
        yield ary.splice(ary, n);
    }

    let brands = this.props.brands || 'Cargando ...';
    let categories = this.props.categories || 'Cargando ...';
    let colors = this.props.colors || 'Cargando ...';
    let department = this.props.department || 'Cargando ...';
    let lines = this.props.lines || 'Cargando ...';
    let products = this.props.products || 'Cargando ...';
    let social_media = this.props.social_media || 'Cargando ...';

    // console.log(products);
    // console.log(this.state.params);
    // console.log(this.state.searchURL);

    let paginator, urlParamsHTML, colorUrlHTML, brandUrlHTML, categoryUrlHTML, lineUrlHTML, departmentUrlHTML = <span></span>;
    let postsCount = products.count || undefined;
    let postsCountLimit = 20;

    let currentPage = this.state.currentPage;
    let limitPage = this.state.limitPage;
    let offsetPage = this.state.offsetPage;
    let urlPage = this.state.urlPage;
    
    if (postsCount >= 21) {
      // let nextPage = this.state.nextPage;
      // let previousPage = this.state.previousPage;
      paginator = (
        <Pagination
          postsCountLimit={postsCountLimit}
          postsCount={postsCount}
          currentPage={currentPage}
          limitPage={limitPage}
          offsetPage={offsetPage}
          urlPage={urlPage}
          urlParams={this.state.urlParams}
          nextPage={this.handleNextClick}
          previousPage={this.handlePrevClick}
          hasNext={this.state.hasNext}
          hasPrev={this.state.hasPrev}
          pages={this.state.totalPages}
        >
        </Pagination>
      );
    }

    if (this.state.hasUrlParams) {
      if (this.state.color !== '') {
        colorUrlHTML = (
          <a className="button is-outlined is-dark is-rounded">
            <span>Color: {this.state.color}</span>
            <span className="icon is-small">
              <i className="fas fa-times"></i>
            </span>
          </a>
        );
      };
      if (this.state.brand !== '') {
        brandUrlHTML = (
          <a className="button is-outlined is-dark is-rounded">
            <span>Marca: {this.state.brand}</span>
            <span className="icon is-small">
              <i className="fas fa-times"></i>
            </span>
          </a>
        );
      };
      if (this.state.category !== '') {
        categoryUrlHTML = (
          <a className="button is-outlined is-dark is-rounded">
            <span>Categoría: {this.state.category}</span>
            <span className="icon is-small">
              <i className="fas fa-times"></i>
            </span>
          </a>
        );
      };
      if (this.state.line !== '') {
        lineUrlHTML = (
          <a className="button is-outlined is-dark is-rounded">
            <span>Linea: {this.state.line}</span>
            <span className="icon is-small">
              <i className="fas fa-times"></i>
            </span>
          </a>
        );
      };
      if (this.state.department !== '') {
        departmentUrlHTML = (
          <a className="button is-outlined is-dark is-rounded">
            <span>Departamento: {this.state.department}</span>
            <span className="icon is-small">
              <i className="fas fa-times"></i>
            </span>
          </a>
        );
      };
      urlParamsHTML = (
        <div className="container is-padding-top-30">
          <div className="columns is-centered">
            <div className="column">
              <p className="buttons">
                {lineUrlHTML} {categoryUrlHTML} {departmentUrlHTML} {brandUrlHTML} {colorUrlHTML}
              </p>
            </div>
          </div>
        </div>
      )
    }

    if (this.state.loading){
      return (
        <div className="product-list">
          <ProductsHeader
            haveFilters={true}
            getFilter={this.getFilter}
            brands={brands}
            categories={categories}
            colors={colors}
            department={department}
            lines={lines}
            hasSearch={true}
            urlPage={urlPage}
            getSearch={this.getSearch} >
          </ProductsHeader>
          <div className="is-padding-top-60" >
            {urlParamsHTML}
            <div className="container is-padding-top-20" id="productsSite">
              <div className="columns is-variable is-1">
                {/* <div className="column is-3">
                    <ProductsSearch />
                  </div> */}
                <div className="column is-padding-top-30" id="feeds">
                  <div className="columns">
                    <TopProducts />
                    <TopProducts />
                    <TopProducts />
                    <TopProducts />
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div><RedesLine redes={social_media} /></div>
        </div>
      );
    }else{
      return (
        <div className="product-list">
          <ProductsHeader
            haveFilters={true}
            getFilter={this.getFilter}
            brands={brands}
            categories={categories}
            colors={colors}
            department={department}
            lines={lines}
            hasSearch={true}
            getSearch={this.getSearch} >
          </ProductsHeader>
          <div className="is-padding-top-60" >
            {urlParamsHTML}
            <div className="container is-padding-top-20" id="productsSite">
              <div className="columns is-variable is-1">
                {/* <div className="column is-3">
                    <ProductsSearch />
                  </div> */}
                <div className="column is-padding-top-30" id="feeds">
                  {Array.from(chunkArray(products.results, 4)).map(
                    ([one, two, three, four], y) => {
                      return (
                        <div className="columns" key={y.toString()}>
                          {one ? <TopProducts product={one}></TopProducts> : <div className="column"></div>}
                          {two ? <TopProducts product={two}></TopProducts> : <div className="column"></div>}
                          {three ? <TopProducts product={three}></TopProducts> : <div className="column"></div>}
                          {four ? <TopProducts product={four}></TopProducts> : <div className="column"></div>}
                        </div>
                      )
                    })
                  }
                </div>
              </div>
              <div className="is-padding-bottom-60">
                {paginator}
              </div>
            </div>
          </div>
          <div><RedesLine redes={social_media} /></div>
        </div>
      );
    }
  }
}

// brands
const brandsSelector = createSelector(state => state.brands, brands => brands);
// categories
const categoriesSelector = createSelector(state => state.categories, categories => categories);
// Color
const colorSelector = createSelector(state => state.colors, colors => colors);
// Departments
const departmentSelector = createSelector(state => state.department, department => department);
// line
const lineSelector = createSelector(state => state.line, line => line);
// lines
const linesSelector = createSelector(state => state.lines, lines => lines);
// products
const productsSelector = createSelector(state => state.products, products => products);
// Social media
const socialMediaSelector = createSelector(state => state.social_media, social_media => social_media);

const mapStateToProps = createSelector(
  brandsSelector,
  categoriesSelector,
  colorSelector,
  departmentSelector,
  lineSelector,
  linesSelector,
  productsSelector,
  socialMediaSelector,
  (brands, categories, colors, department, line, lines, products, social_media) => (
    {
      brands,
      categories,
      colors,
      department,
      line,
      lines,
      products,
      social_media
    }
  )
);

const mapDispatchToProps = (dispatch, props) => {
  return bindActionCreators(
    {
      onFetchBrands: fetchBrands,
      onFetchCategories: fetchCategories,
      onFetchColor: fetchColors,
      onFetchDepartment: fetchDepartments,
      onFetchLine: fetchSingleLine,
      onFetchLines: fetchLines,
      onFetchProducts: fetchProducts,
      onFetchSocialMedia: fetchSocialMedia,
    }, dispatch
  );
}

export default connect(mapStateToProps, mapDispatchToProps)(ProductDetail);